<template>
  <v-fade-transition group mode="out-in">
    <div v-if="isLoading" key="2" class="d-flex justify-center">
      <v-progress-circular indeterminate color="#54a9eb" />
    </div>
    <div
      v-show="!isLoading"
      ref="telegramRef"
      key="1"
      class="d-flex justify-center align-items-center"
    />
  </v-fade-transition>
</template>

<script lang="ts">
import {
  defineComponent,
  onMounted,
  PropType,
  ref,
} from '@nuxtjs/composition-api'

export default defineComponent({
  name: 'TelegramLogin',
  props: {
    mode: {
      type: String,
      required: true,
      
      // validator(value: string) {
      //   return ['callback', 'redirect'].includes(value)
      // },
    },
    telegramLogin: {
      type: String,
      required: true,
      // validator(value: string) {
      //   return value.endsWith('bot') || value.endsWith('Bot')
      // },
    },
    redirectUrl: {
      type: String,
      default: '',
    },
    requestAccess: {
      type: String,
      default: 'read',
      // validator(value: string) {
      //   return ['read', 'write'].includes(value)
      // },
    },
    size: {
      type: String,
      default: 'large',
      // validator(value: string) {
      //   return ['small', 'medium', 'large'].includes(value)
      // },
    },
    userpic: {
      type: Boolean,
      default: true,
    },
    radius: {
      type: String,
    },
  },
  setup(props, { emit }) {
    const telegramRef = ref<null | HTMLElement>(null)

    const isLoading = ref(true)

    const onTelegramAuth = (user: any) => {
      emit('callback', user)
    }

    onMounted(() => {
      // create script with given params
      const script = document.createElement('script')
      script.async = true
      script.src = 'https://telegram.org/js/telegram-widget.js?3'
      script.onload = () => {
        setTimeout(() => {
          isLoading.value = false
        }, 500)
      }

      script.setAttribute('data-size', props.size)
      script.setAttribute('data-userpic', props.userpic.toString())
      script.setAttribute('data-telegram-login', props.telegramLogin)
      script.setAttribute('data-request-access', props.requestAccess)
      if (props.radius) {
        script.setAttribute('data-radius', props.radius)
      }

      if (props.mode === 'callback') {
        // @ts-ignore
        window.onTelegramAuth = onTelegramAuth
        script.setAttribute('data-onauth', 'window.onTelegramAuth(user)')
      } else {
        script.setAttribute('data-auth-url', props.redirectUrl)
      }

      telegramRef.value?.appendChild(script)
    })

    return {
      telegramRef,
      isLoading,
    }
  },
})
</script>
